const mongoose = require('mongoose');

const deliverySchema = new mongoose.Schema({
    delivery_type: String,
    delivery_medium: String,
    // delivery_code: String,
    delivered_in: Number,
    pickup_location: String,
    pickup_address: String,
    pickup_time: Number,
    estimated_pickup_time: Number,
    estimated_drop_off_time: Number,
    drop_off_location: [{ no: { type: Number, default: 1 }, location: String }],
    drop_off_address: [{ no: { type: Number, default: 1 }, location: String }],
    current_location: String,
    arrived_pickup_location: { type: Boolean, default: false },
    timestamp: Number,
    day: Number,
    week: Number,
    month: Number,
    year: Number,
    reciever_name: String,
    reciever_phone_no: String,
    delivery_confirmation_proof_urls: [String],
    delivery_confirmation_proof_ids: [String],
    incident_report: String,
    delivery_status: {
        is_accepted: { type: Boolean, default: false },
        is_accepted_at: Number,
        is_started: { type: Boolean, default: false },
        is_started_at: Number,
        is_completed: { type: Boolean, default: false },
        is_completed_at: Number,
        is_successful: { type: Boolean, default: false },
        is_successful_at: Number,
        is_cancelled: { type: Boolean, default: false },
        is_cancelled_by: String,
        is_cancelled_at: Number,
        scheduled_delivery_pickup_timestamp: Number,
        is_booked: { type: Boolean, default: false },
        is_paid: { type: Boolean, default: false },
        arrived_pickup_location: { type: Boolean, default: false },
        arrived_dropoff_location: { type: Boolean, default: false },
        timed_out: { type: Boolean, default: false },
        user_payment_timed_out: { type: Boolean, default: false }
    },
    sender_id: String,
    sender_fullname: String,
    sender_phone_no: String,
    sender_email: String,
    sender_img: String,
    parcel_code: String,
    parcel_name: String,
    parcel_description: String,
    delivery_cost_user: Number,
    delivery_cost_delivery_agent: Number,
    delivery_instructions: String,
    imgs: [String],
    img_ids: [String],
    parcel_type: String,
    delivery_agent_id: String,
    delivery_agent_name: String,
    delivery_agent_vehicle_type: String,
    delivery_agent_plate_no: String,
    delivery_agent_phone_no: String,
    delivery_agent_code: String,
    delivery_agent_vehicle_color: String,
    delivery_agent_img: String,
    delivery_agent_img_id: String,
    delivery_agent_email: String,
    delivery_agent_vehicle_imgs_urls: [String],
    fleet_manager_code: String, // updated if a delivery agent is under a fleet manager
    transaction_id: String,
    cancel_reason: String,
    delivery_agent_cancel_reason: String,
    distance: [Number],
    delivery_accept_request_notification_id: { type: String, default: '' },
    is_refunded: { type: Boolean, default: false },
    is_reviewed: { type: Boolean, default: false },
    review_id: { type: String, default: "" },
    review: { type: String, default: "" },
    review_timestamp: { type: Number, default: 0 },
    review_stars: { type: Number, default: 0 },
    daily_is_rewarded: { type: Boolean, default: false },
    daily_rewarded_timestamp: { type: Number, default: 0 },
    daily_reward_notifier: { type: String, default: "" },
    weekly_is_rewarded: { type: Boolean, default: false },
    weekly_rewarded_timestamp: { type: Number, default: 0 },
    weekly_reward_notifier: { type: String, default: "" },
    order_placed_at: { type: Number, default: Date.now },
    order_expiry: { type: Number, default: () => Date.now() + (2 * 60 * 1000) },
}, { collection: 'deliveries' });

const model = mongoose.model('Delivery', deliverySchema);
module.exports = model;